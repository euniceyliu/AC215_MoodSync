name: Run Tests

on:
  push:
    branches: [ milestone4 ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'

    - name: Install Pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv

    - name: Create coverage directory
      run: |
        mkdir -p ${{ github.workspace }}/coverage
        chmod -R 777 ${{ github.workspace }}/coverage

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.5.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Create external Docker network
      run: docker network create llm-rag-network || true

    - name: Setup test environment
          run: |
            cd src
            # Create and initialize Pipfile and Pipfile.lock
            touch Pipfile
            chmod 666 Pipfile
            pipenv install --dev
            # Generate Pipfile.lock
            pipenv lock
            chmod 666 Pipfile.lock
            chmod -R 777 .

    - name: Build Docker image
          run: |
            cd src  # Change to src directory first
            docker build -t test-image .  # Build from current directory
            docker image ls

    - name: Run docker compose
      run: |
        cd src
        docker-compose up -d
        docker ps
        sleep 15

    - name: Run tests with proper permissions
      run: |
        cd src
        CONTAINER_NAME=$(docker-compose ps -q test-image)
        echo "Container ID: $CONTAINER_NAME"
        
        # Ensure proper permissions
        docker exec $CONTAINER_NAME bash -c "mkdir -p /coverage && chmod -R 777 /coverage"
        
        # Run tests
        docker exec \
          -e COVERAGE_FILE=/coverage/.coverage \
          $CONTAINER_NAME \
          bash -c "cd /app && PYTHONPATH=/app pipenv run pytest \
          --cov=src \
          --cov-report=xml:/coverage/coverage.xml \
          --cov-report=html:/coverage/html \
          tests/"

    - name: Copy coverage reports
      if: always()
      run: |
        cd src
        CONTAINER_NAME=$(docker-compose ps -q test-image)
        if [ -z "$CONTAINER_NAME" ]; then
          echo "Error: Could not find test container"
          exit 1
        fi
        docker exec $CONTAINER_NAME bash -c "ls -la /coverage"
        docker cp $CONTAINER_NAME:/coverage/. ${{ github.workspace }}/coverage/
        sudo chown -R $USER:$USER ${{ github.workspace }}/coverage/

    - name: Upload Coverage Report (XML)
      if: always()
      continue-on-error: true
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-xml
        path: coverage/coverage.xml
        if-no-files-found: warn

    - name: Upload Coverage Report (HTML)
      if: always()
      continue-on-error: true
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-html
        path: coverage/html
        if-no-files-found: warn

    - name: Cleanup
      if: always()
      run: |
        cd src
        docker-compose down
        docker network rm llm-rag-network || true