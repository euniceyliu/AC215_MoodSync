name: Run Tests
on: 
  push:
    branches: [ milestone4 ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.5.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Create external Docker network
        run: docker network create llm-rag-network || true

      - name: Setup test environment
        run: |
          mkdir -p src/.coverage-reports
          chmod -R 777 src/.coverage-reports
          cd src
          touch Pipfile
          chmod 666 Pipfile
          pipenv install pytest pytest-cov chromadb langchain openai google-cloud-aiplatform --dev
          pipenv lock
          chmod 666 Pipfile.lock

      - name: Build Docker image
        run: |
          cd src
          docker build -t test-image .
          docker image ls

      - name: Run docker compose
        run: |
          cd src
          docker-compose up -d
          docker ps
          sleep 15

      - name: Run tests with coverage
        run: |
          cd src
          CONTAINER_NAME=$(docker-compose ps -q test-image)
          echo "Container ID: $CONTAINER_NAME"
          
          # Create a shell script to run the tests
          cat << 'EOF' > run_tests.sh
          #!/bin/bash
          cd /app
          
          # Ensure coverage directory exists and has correct permissions
          mkdir -p .coverage-reports/htmlcov
          chmod -R 777 .coverage-reports
          
          # Run tests with explicit paths
          PYTHONPATH=/app \
          COVERAGE_FILE=/app/.coverage-reports/.coverage \
          pipenv run pytest \
            --cov=. \
            --cov-report=term-missing \
            --cov-report=xml:/app/.coverage-reports/coverage.xml \
            --cov-report=html:/app/.coverage-reports/htmlcov \
            tests/ -v
          
          # Ensure all files are accessible
          chmod -R 777 /app/.coverage-reports
          EOF
          
          chmod +x run_tests.sh
          docker cp run_tests.sh $CONTAINER_NAME:/app/
          docker exec $CONTAINER_NAME bash -c "/app/run_tests.sh"

      - name: Upload Coverage Report (XML)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-xml
          path: src/.coverage-reports/coverage.xml
          if-no-files-found: error

      - name: Upload Coverage Report (HTML)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-html
          path: src/.coverage-reports/htmlcov
          if-no-files-found: error

      - name: Cleanup
        if: always()
        run: |
          cd src
          docker-compose down
          docker network rm llm-rag-network || true