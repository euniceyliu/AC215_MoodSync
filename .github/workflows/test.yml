name: Run Tests
on:
  push:
    branches: [ milestone4 ]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set permissions for coverage directory
      run: |
        mkdir -p ${{ github.workspace }}/coverage
        chmod -R 777 ${{ github.workspace }}/coverage

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.5.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Create external Docker network
      run: docker network create llm-rag-network || true

    - name: Build Docker image
      run: docker build -t test-image -f src/Dockerfile .
      
    - name: Run docker compose
      run: |
        docker-compose -f src/docker-compose.yml up -d
        docker ps
        sleep 10  # Give containers time to start up properly

    - name: Run tests
      run: |
        CONTAINER_NAME=$(docker-compose -f src/docker-compose.yml ps -q test-image)
        echo "Container ID: $CONTAINER_NAME"
        # Create coverage directory with proper permissions inside container
        docker exec $CONTAINER_NAME mkdir -p /app/coverage
        docker exec $CONTAINER_NAME chmod 777 /app/coverage
        # Run tests with specific coverage configuration
        docker exec \
          -e COVERAGE_FILE=/app/coverage/.coverage \
          -e COVERAGE_RCFILE=/app/coverage/.coveragerc \
          $CONTAINER_NAME /bin/sh -c \
          'cd /app && pipenv run pytest \
          --cov-config=/app/coverage/.coveragerc \
          --cov=src \
          --cov-report=xml:/app/coverage/coverage.xml \
          --cov-report=html:/app/coverage/html'

    - name: Create coverage config
      run: |
        CONTAINER_NAME=$(docker-compose -f src/docker-compose.yml ps -q test-image)
        echo '[run]
        data_file = /app/coverage/.coverage
        parallel = True
        concurrency = multiprocessing
        source = src
        
        [report]
        exclude_lines =
            pragma: no cover
            def __repr__
            raise NotImplementedError
            if __name__ == .__main__.:
            pass
        
        [html]
        directory = /app/coverage/html
        
        [xml]
        output = /app/coverage/coverage.xml' | docker exec -i $CONTAINER_NAME tee /app/coverage/.coveragerc

    - name: List container contents
      run: |
        CONTAINER_NAME=$(docker-compose -f src/docker-compose.yml ps -q test-image)
        echo "Listing /app/coverage in container..."
        docker exec $CONTAINER_NAME ls -la /app/coverage

    - name: Upload Coverage Report (XML)
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-xml
        path: ${{ github.workspace }}/coverage/coverage.xml
        if-no-files-found: error

    - name: Upload Coverage Report (HTML)
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-html
        path: ${{ github.workspace }}/coverage/html
        if-no-files-found: error