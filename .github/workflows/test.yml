name: Run Tests
on: 
  push:
    branches: [ milestone4 ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv

      - name: Create coverage directory
        run: |
          mkdir -p coverage
          chmod -R 777 coverage

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.5.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Create external Docker network
        run: docker network create llm-rag-network || true

      - name: Setup test environment
        run: |
          cd src
          touch Pipfile
          chmod 666 Pipfile
          pipenv install pytest pytest-cov chromadb langchain openai google-cloud-aiplatform --dev
          pipenv lock
          chmod 666 Pipfile.lock
          chmod -R 777 .

      - name: Build Docker image
        run: |
          cd src
          docker build -t test-image .
          docker image ls

      - name: Run docker compose
        run: |
          cd src
          docker-compose up -d
          docker ps
          sleep 15

      - name: Run tests with proper permissions
        run: |
          cd src
          CONTAINER_NAME=$(docker-compose ps -q test-image)
          echo "Container ID: $CONTAINER_NAME"
          
          # Ensure coverage directory exists and has proper permissions
          docker exec $CONTAINER_NAME bash -c "mkdir -p /coverage && chmod -R 777 /coverage"
          
          # Run tests with explicit coverage path
          docker exec \
            -e COVERAGE_FILE=/coverage/.coverage \
            $CONTAINER_NAME \
            bash -c "cd /app && PYTHONPATH=/app pipenv run pytest \
            --cov=src \
            --cov-report=term-missing \
            --cov-report=xml:/coverage/coverage.xml \
            --cov-report=html:/coverage/htmlcov \
            tests/ -v"

      - name: Copy coverage reports
        if: always()
        run: |
          cd src
          CONTAINER_NAME=$(docker-compose ps -q test-image)
          
          # Create coverage directory in workspace
          mkdir -p coverage
          chmod -R 777 coverage
          
          # Copy coverage files from container
          docker cp $CONTAINER_NAME:/coverage/coverage.xml ./coverage/
          docker cp $CONTAINER_NAME:/coverage/htmlcov ./coverage/
          
          echo "Coverage files in ./coverage:"
          ls -la coverage/

      - name: Upload Coverage Report (XML)
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-xml
          path: src/coverage/coverage.xml
          if-no-files-found: warn

      - name: Upload Coverage Report (HTML)
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-html
          path: src/coverage/htmlcov
          if-no-files-found: warn

      - name: Cleanup
        if: always()
        run: |
          cd src
          docker-compose down
          docker network rm llm-rag-network || true